name: Nixpkgs Review
permissions: {}
on:
  workflow_dispatch:
    inputs:
      debug:
        description: Enable debug
        type: boolean
        default: false
      os:
        description: OS
        type: choice
        options: 
          - linux
          - darwin
          - aarch64-darwin
          - x86_64-darwin
          - all
        default: all
      pr:
        description: Pull request to review
        type: string
        required: true
      install_action:
        description: Use cachix/install-nix-action or nixbuild/nix-quick-install-action
        type: choice
        options: 
          - cachix
          - nixbuild
        default: cachix
      btrfs:
        description: Clean up disk and enable BTRFS RAID0 on Linux to get max disk space
        type: boolean
        default: false
run-name: Nixpkgs Review ${{ inputs.pr }}
jobs:
  nixpkgs-review:
    strategy:
      fail-fast: false
      matrix:
        os: >-
          ${{ fromJSON(
            inputs.os == 'linux' && '["ubuntu-latest"]' || (
            inputs.os == 'darwin' && '["macos-latest", "macos-13"]' || (
            inputs.os == 'aarch64-darwin' && '["macos-latest"]' || (
            inputs.os == 'x86_64-darwin' && '["macos-13"]' || (
            '["ubuntu-latest", "macos-latest", "macos-13"]'
          ))))) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./nix
        with:
          key: nixpkgs-review
          debug: ${{ inputs.debug }}
          install_action: ${{ inputs.install_action }}
          clean: ${{ inputs.btrfs }}
          btrfs: ${{ inputs.btrfs }}
      - name: Install tools
        run: |
          nix-env -f '<nixpkgs>' -iA cloudflared tmux
          nix build --no-link --profile ~/.local/state/nix/profiles/shell github:Mic92/nixpkgs-review
      - uses: ./nix/post
      - uses: actions/checkout@v4
        with:
          repository: NixOS/nixpkgs
          path: nixpkgs
      - name: Run nixpkgs-review pr ${{ inputs.pr }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST: ${{ inputs.pr }}
        run: |
          echo "CURRENT_SYSTEM=$(nix eval --impure --raw --expr builtins.currentSystem)" >>"$GITHUB_ENV"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          cd nixpkgs
          IFS=' ' read -r -a args <<<"$PULL_REQUEST"
          nix shell ~/.local/state/nix/profiles/shell --command nixpkgs-review pr --no-shell --print-result "${args[@]}" || true
          test -e ~/.cache/nixpkgs-review/*/report.md
      - uses: actions/upload-artifact@v4
        with:
          name: report-${{ env.CURRENT_SYSTEM }}
          path: |
            ~/.cache/nixpkgs-review/
            !~/.cache/nixpkgs-review/*/results/
  summary:
    # For displaying `Final summary` in `Summary`
    name: Final
    needs: nixpkgs-review
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
      - name: Summary
        env:
          PULL_REQUEST: ${{ inputs.pr }}
        run: |
          PR=${PULL_REQUEST##*/}

          generate_logs() {
            reports=(report-*-linux/*/report.json)
            reports+=(report-*-darwin/*/report.json)
            for report in "${reports[@]}"; do
              system=$(jq -r '.systems[0]' "$report")
              mapfile -t packages < <(jq -r '.result | .[].failed | .[]' "$report")
              if [ "${#packages[@]}" -gt 0 ]; then
                cat <<EOF

          ---
          ### $system

          EOF
                for package in "${packages[@]}"; do
                  log="${report%/*}/logs/${package}-${system}.log"
                  if [ -e "$log" ]; then
                    cat <<EOF
          <details>
            <summary>:x: $package</summary>

          \`\`\`\`
          \`\`\`
          EOF
                    tail -n 25 "$log"
                    cat <<EOF
          \`\`\`
          \`\`\`\`
          </details>
          EOF
                  fi
                done
              fi
            done
          }

          generate_summary() {
            reports=(report-*-linux/*/report.md)
            reports+=(report-*-darwin/*/report.md)
            cat "${reports[0]}"
            sed -s -n -e '/---/,$p' -e '1i\
          ' "${reports[@]:1}" 2>/dev/null
          }

          summary=$(generate_summary)

          cat >> "$GITHUB_STEP_SUMMARY" <<EOF
          ## [Nixpkgs #${PR}](https://github.com/NixOS/nixpkgs/pull/${PR})

          $summary

          ---
          \`\`\`
          $summary
          \`\`\`
          EOF

          generate_logs >> "$GITHUB_STEP_SUMMARY"
      - uses: actions/upload-artifact@v4
        with:
          name: report-all
          path: report-*
