name: Nix
permissions: {}
on:
  pull_request:
    paths:
      - 'nix/**'
      - .github/workflows/nix.yml
  push:
    paths:
      - 'nix/**'
      - .github/workflows/nix.yml
  workflow_dispatch:
    inputs:
      debug:
        description: Enable debug
        type: boolean
        default: false
      os:
        description: OS to run
        type: choice
        options: 
          - linux
          - darwin
          - aarch64-darwin
          - x86_64-darwin
          - all
        default: all
      install_action:
        description: Install action to use
        type: choice
        options: 
          - cachix
          - nixbuild
          - all
        default: nixbuild
jobs:
  clear_cache:
    if: ${{ ! inputs.debug }}
    permissions:
      actions: write
    runs-on: ubuntu-latest
    steps:
      - name: Clear cache
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh --repo "$GITHUB_REPOSITORY" cache list --key nix- --json id --jq '.[].id' | while read -r id
          do
            gh --repo "$GITHUB_REPOSITORY" cache delete "$id"
          done
  nix:
    needs: clear_cache
    if: ${{ always() && !failure() && !cancelled() }}
    strategy:
      fail-fast: false
      matrix:
        os: >-
          ${{ fromJSON(
            inputs.os == 'linux' && '["ubuntu-latest"]' || (
            inputs.os == 'darwin' && '["macos-latest", "macos-13"]' || (
            inputs.os == 'aarch64-darwin' && '["macos-latest"]' || (
            inputs.os == 'x86_64-darwin' && '["macos-13"]' || (
            '["ubuntu-latest", "macos-latest", "macos-13"]'
          ))))) }}
        install_action: >-
          ${{ fromJSON(
            inputs.install_action == 'cachix' && '[ "cachix" ]' || (
            inputs.install_action == 'nixbuild' && '[ "nixbuild" ]' || (
            '[ "cachix", "nixbuild" ]'
          ))) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./nix
        with:
          debug: ${{ github.event_name == 'workflow_dispatch' && inputs.debug }}
          install_action: ${{ matrix.install_action }}
          key: nix-${{ matrix.install_action }}
      - name: Install tools for debug
        run: |
          nix-env -f '<nixpkgs>' -iA cloudflared tmux
      - uses: ./nix/post
  nix_with_cache:
    needs: nix
    strategy:
      fail-fast: false
      matrix:
        os: >-
          ${{ fromJSON(
            inputs.os == 'linux' && '["ubuntu-latest"]' || (
            inputs.os == 'darwin' && '["macos-latest", "macos-13"]' || (
            inputs.os == 'aarch64-darwin' && '["macos-latest"]' || (
            inputs.os == 'x86_64-darwin' && '["macos-13"]' || (
            '["ubuntu-latest", "macos-latest", "macos-13"]'
          ))))) }}
        install_action: >-
          ${{ fromJSON(
            inputs.install_action == 'cachix' && '[ "cachix" ]' || (
            inputs.install_action == 'nixbuild' && '[ "nixbuild" ]' || (
            '[ "cachix", "nixbuild" ]'
          ))) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./nix
        with:
          install_action: ${{ matrix.install_action }}
          key: nix-${{ matrix.install_action }}
      - name: Install tools for debug
        run: |
          nix-env -f '<nixpkgs>' -iA cloudflared tmux
      - name: Test if restore from cache success
        run: |
          [ -e /nix/store.bak ] && [ ! -e /nix/store.failed ]
      - uses: ./nix/post
      - name: Test if cache does not need update
        run: |
          [ "$CACHE_NEED_UPDATE" != yes ]
