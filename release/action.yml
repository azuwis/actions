name: Create release
inputs:
  files:
    description: Files to upload as release assets
    required: false
  tag:
    description: Tag to create release from
    default: ${{ github.ref_name }}
  draft:
    default: false
  prerelease:
    default: false
runs:
  using: composite
  steps:
    - name: Create release
      id: create_release
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      env:
        INPUTS_DRAFT: ${{ inputs.draft }}
        INPUTS_PRERELEASE: ${{ inputs.prerelease }}
        INPUTS_TAG: ${{ inputs.tag }}
      with:
        script: |
          const { owner, repo } = context.repo;
          const tag = process.env.INPUTS_TAG;
          let release
          try {
            release = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag,
            });
            console.log('Use existing release');
          } catch (e) {
            console.log('Create new release');
            release = await github.rest.repos.createRelease({
              owner,
              repo,
              name: tag,
              tag_name: tag,
              generate_release_notes: true,
              draft: process.env.INPUTS_DRAFT == 'true',
              prerelease: process.env.INPUTS_PRERELEASE == 'true',
            });
          }
          core.setOutput('release_id', release.data.id);
    - name: Upload assets
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      if: ${{ inputs.files }}
      env:
        FILES: ${{ inputs.files }}
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const { owner, repo } = context.repo;
          const release_id = ${{ steps.create_release.outputs.release_id }};
          const files = await glob.create(process.env.FILES).then(globber => globber.glob())
            .then(files => files.filter(file => fs.lstatSync(file).isFile()));
          await github.rest.repos.listReleaseAssets({
            owner,
            repo,
            release_id,
          }).then(resp => {
            const basenames = files.map(file => path.basename(file));
            resp.data.filter(asset => basenames.includes(asset.name)).forEach(asset => {
              console.log('Delete', asset.name);
              github.rest.repos.deleteReleaseAsset({
                owner,
                repo,
                asset_id: asset.id,
              });
            });
          });
          for (const file of files) {
            console.log('Upload', file);
            const name = path.basename(file);
            await github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id,
              name,
              data: fs.readFileSync(file),
            });
          }
